{
  "IssueID": 8043,
  "VulnerabilityID": "CVE-2017-15041",
  "Release": "3.6",
  "Package": "go",
  "Repository": "community",
  "FixedVersion": "1.8.4-r0",
  "Subject": "[3.6] go: Multiple vulnerabilities (CVE-2017-15041, CVE-2017-15042)",
  "Description": "h2. CVE-2017-15042: smtp.PlainAuth susceptible to man-in-the-middle password harvesting\r\n\r\nIt was found that smtp.PlainAuth scheme was vulnerable to man-in-the-middle attack. smtp.PlainAuth implementation\r\nwould send the username and password to man-in-the-middle SMTP server that doesn’t advertise STARTTLS and \r\ndoes advertise that PLAIN auth is OK.\r\n\r\nh3. Fixed In Version:\t\r\n\r\ngolang 1.8.4, golang 1.9.1\r\n\r\nh3. References:\r\n\r\nhttps://github.com/golang/go/issues/22134\r\n\r\n\r\nh3. Patches:\r\n\r\nGo 1.8: https://go-review.googlesource.com/c/go/+/68023\r\nGo 1.9: https://go-review.googlesource.com/c/go/+/68210\r\n\r\nh2. CVE-2017-15041: arbitrary code execution during “go get” or “go get -d”\r\n\r\nUsing custom domains, it is possible to arrange things so that example.com/pkg1 points to a Subversion repository \r\nbut example.com/pkg1/pkg2 points to a Git repository. If the Subversion repository includes a Git checkout in its pkg2 \r\ndirectory and some other work is done to ensure the proper ordering of operations, “go get” can be tricked into \r\nreusing this Git checkout for the fetch of code from pkg2. If the Subversion repository’s Git checkout has a malicious\r\n code in .git/hooks/, it will execute on the system running “go get.”\r\n\r\nh3. Fixed In Version:\t\r\n\r\ngolang 1.8.4, golang 1.9.1\r\n\r\nh3. References:\r\n\r\nhttps://github.com/golang/go/issues/22125\r\n\r\nh3. Patches:\r\n\r\nGo 1.8: https://go-review.googlesource.com/c/go/+/68190\r\nGo 1.9: https://go-review.googlesource.com/c/go/+/68022\r\n"
}