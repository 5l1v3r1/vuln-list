{
  "IssueID": 4436,
  "VulnerabilityID": "CVE-2015-5143",
  "Release": "3.2",
  "Package": "py-django",
  "Repository": "main",
  "FixedVersion": "1.8.3-r0",
  "Subject": "[v3.2] django: Denial-of-service possibility by filling session store (CVE-2015-5143, CVE-2015-5144, CVE-2015-5145)",
  "Description": "Denial-of-service possibility by filling session store (CVE-2015-5143)\r\n\r\n\r\nIn previous versions of Django, the session backends created a new empty record in the session storage anytime request.session was accessed and there was a session key provided in the request cookies that didn't already have a session record. This could allow an attacker to easily create many new session records simply by sending repeated requests with unknown session keys, potentially filling up the session store or causing other users' session records to be evicted.\r\n\r\nThe built-in session backends now create a session record only if the session is actually modified; empty session records are not created. Thus this potential DoS is now only possible if the site chooses to expose a session-modifying view to anonymous users.\r\n\r\nAs each built-in session backend was fixed separately (rather than a fix in the core sessions framework), maintainers of third-party session backends should check whether the same vulnerability is present in their backend and correct it if so.\r\n\r\nHeader injection possibility since validators accept newlines in input (CVE-2015-5144)\r\n\r\n\r\nSome of Django's built-in validators (django.core.validators.EmailValidator, most seriously) didn't prohibit newline characters (due to the usage of $ instead of \\Z in the regular expressions). If you use values with newlines in HTTP response or email headers, you can suffer from header injection attacks. Django itself isn't vulnerable because django.http.HttpResponse and the mail sending utilities in django.core.mail prohibit newlines in HTTP and SMTP headers, respectively. While the validators have been fixed in Django, if you're creating HTTP responses or email messages in other ways, it's a good idea to ensure that those methods prohibit newlines as well. You might also want to validate that any existing data in your application doesn't contain unexpected newlines.\r\n\r\ndjango.core.validators.validate_ipv4_address(), django.core.validators.validate_slug(), and django.core.validators.URLValidator are also affected, however, as of Django 1.6 the GenericIPAddresseField, IPAddressField, SlugField, and URLField form fields which use these validators all strip the input, so the possibility of newlines entering your data only exists if you are using these validators outside of the form fields.\r\n\r\nThe undocumented, internally unused validate_integer() function is now stricter as it validates using a regular expression instead of simply casting the value using int() and checking if an exception was raised.\r\n\r\nDenial-of-service possibility in URL validation (CVE-2015-5145)\r\n\r\n\r\ndjango.core.validators.URLValidator included a regular expression that was extremely slow to evaluate against certain inputs. This regular expression has been simplified and optimized.\r\n\r\nAffected supported versions\r\n•Django master development branch\r\n•Django 1.8\r\n•Django 1.7 (except the URL DoS issue)\r\n•Django 1.4 (except the URL DoS issue)\r\n\r\nPer our supported versions policy, Django 1.5 and 1.6 are no longer receiving security updates.\r\n\r\nReference:\r\n\r\n\r\nhttps://www.djangoproject.com/weblog/2015/jul/08/security-releases/\r\n"
}