{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat JBoss Fuse 6",
      "fix_state": "Not affected",
      "package_name": "Camel",
      "cpe": "cpe:/a:redhat:jboss_fuse:6"
    },
    {
      "product_name": "Red Hat OpenStack Platform 10",
      "fix_state": "New",
      "package_name": "opendaylight",
      "cpe": "cpe:/a:redhat:openstack:10"
    },
    {
      "product_name": "Red Hat OpenStack Platform 11.0 (Ocata)",
      "fix_state": "New",
      "package_name": "opendaylight",
      "cpe": "cpe:/a:redhat:openstack:11"
    },
    {
      "product_name": "Red Hat OpenStack Platform 12.0",
      "fix_state": "New",
      "package_name": "opendaylight",
      "cpe": "cpe:/a:redhat:openstack:12"
    },
    {
      "product_name": "Red Hat OpenStack Platform 9.0",
      "fix_state": "New",
      "package_name": "opendaylight",
      "cpe": "cpe:/a:redhat:openstack:9"
    }
  ],
  "threat_severity": "Important",
  "public_date": "2017-09-20T00:00:00Z",
  "bugzilla": {
    "description": "\nCVE-2017-4995 Spring Security: Deserialization of untrusted data via Jackson\n    ",
    "id": "1499182",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1499182"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "8.1",
    "cvss3_scoring_vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-502",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2017-4995",
  "document_distribution": "",
  "details": [
    "\nAn issue was discovered in Pivotal Spring Security 4.2.0.RELEASE through 4.2.2.RELEASE, and Spring Security 5.0.0.M1. When configured to enable default typing, Jackson contained a deserialization vulnerability that could lead to arbitrary code execution. Jackson fixed this vulnerability by blacklisting known \"deserialization gadgets.\" Spring Security configures Jackson with global default typing enabled, which means that (through the previous exploit) arbitrary code could be executed if all of the following is true: (1) Spring Security's Jackson support is being leveraged by invoking SecurityJackson2Modules.getModules(ClassLoader) or SecurityJackson2Modules.enableDefaultTyping(ObjectMapper); (2) Jackson is used to deserialize data that is not trusted (Spring Security does not perform deserialization using Jackson, so this is an explicit choice of the user); and (3) there is an unknown (Jackson is not blacklisting it already) \"deserialization gadget\" that allows code execution present on the classpath. Jackson provides a blacklisting approach to protecting against this type of attack, but Spring Security should be proactive against blocking unknown \"deserialization gadgets\" when Spring Security enables default typing.\n    ",
    "\nIt was found that spring security uses Jackson's enableDefaultTyping() polymorphic capability for object deserialization. Jackson has already addressed this issue by blacklisting well-known gadget classes. However, under a right circumstances (e.g. an existence of an old JDK and vulnerable Jackson in classpath), an attacker could use this vulnerability to craft a malicious payload which would be deserialized by Jackson via spring security. This execution could potentially lead to remote code execution on the target machine.\n    "
  ],
  "references": [
    "\nhttps://pivotal.io/security/cve-2017-4995\n    "
  ]
}