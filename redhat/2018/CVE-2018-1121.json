{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 5",
      "fix_state": "Will not fix",
      "package_name": "procps",
      "cpe": "cpe:/o:redhat:enterprise_linux:5"
    },
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Will not fix",
      "package_name": "procps",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Will not fix",
      "package_name": "procps-ng",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Will not fix",
      "package_name": "procps-ng",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    }
  ],
  "threat_severity": "Low",
  "public_date": "2018-05-17T17:00:00Z",
  "bugzilla": {
    "description": "\nCVE-2018-1121 procps-ng, procps: process hiding through race condition enumerating /proc\n    ",
    "id": "1575473",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1575473"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "3.9",
    "cvss3_scoring_vector": "CVSS:3.0/AV:L/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:L",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-367",
  "statement": "\n\n    ",
  "acknowledgement": "\nRed Hat would like to thank Qualys Research Labs for reporting this issue.\n    ",
  "name": "CVE-2018-1121",
  "document_distribution": "",
  "details": [
    "\nprocps-ng, procps is vulnerable to a process hiding through race condition. Since the kernel's proc_pid_readdir() returns PID entries in ascending numeric order, a process occupying a high PID can use inotify events to determine when the process list is being scanned, and fork/exec to obtain a lower PID, thus avoiding enumeration. An unprivileged attacker can hide a process from procps-ng's utilities by exploiting a race condition in reading /proc/PID entries. This vulnerability affects procps and procps-ng up to version 3.3.15, newer versions might be affected also.\n    ",
    "\nSince the kernel's proc_pid_readdir() returns PID entries in ascending numeric order, a process occupying a high PID can use inotify events to determine when the process list is being scanned, and fork/exec to obtain a lower PID, thus avoiding enumeration. An unprivileged attacker can hide a process from procps-ng's utilities by exploiting a race condition in reading /proc/PID entries.\n    "
  ],
  "references": [
    "\nhttps://www.qualys.com/2018/05/17/procps-ng-audit-report-advisory.txt\n    "
  ]
}