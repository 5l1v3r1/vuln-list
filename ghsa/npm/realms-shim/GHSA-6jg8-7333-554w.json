{
  "Severity": "CRITICAL",
  "UpdatedAt": "2019-10-04T17:55:55Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "realms-shim"
  },
  "Advisory": {
    "DatabaseId": 1724,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTZqZzgtNzMzMy01NTR3",
    "GhsaId": "GHSA-6jg8-7333-554w",
    "References": [
      {
        "Url": "https://github.com/Agoric/realms-shim/security/advisories/GHSA-6jg8-7333-554w"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-6jg8-7333-554w"
      }
    ],
    "Description": "## realms-shim / SES sandbox escapes\n\n### Impact\r\n\r\nThe `realms-shim` package implements the [Realms proposal](https://github.com/tc39/proposal-realms/). The [SES](https://github.com/Agoric/SES/) package builds upon Realms to build secure sandboxes for executing untrusted Javascript code. Sandboxed code cannot modify the primordial objects (aka \"prototype poisoning\") within the sandbox, nor can it interact with other objects unless it is first given a reference to those objects. This provides an \"object-capability safe\" execution environment.\r\n\r\nSeveral bugs were found in `realms-shim`, which allow the confined code to escape the sandbox and compromise the \"primal realm\" (the one which created the sandbox). This generally leads to a full compromise of the application, since the primal realm includes access to e.g. `require('fs')`, from which the attacker can rewrite the application's source code.\r\n\r\nUntil very recently, the only convenient way to use the `realms-shim` package was to include it as a git submodule (the first tagged release was made on 18-Sep-2019), or to use SES. Consequently the vulnerable population includes users of SES-0.6.2 or older, users of realms-shim-1.1.2 or older, and users of any package that use a git-submodule to include the realms-shim.\r\n\r\n### Patches\r\n\r\nThe bugs have been fixed in realms-shim-1.2.0, which has been incorporated into SES-0.6.3 . All users should upgrade to one of these releases.\r\n\r\n### Workarounds\r\n\r\nSES and the Realms feature are designed to protect against arbitrary and unreviewed attacker-supplied code. Applications which rely upon this property must upgrade to the newer versions of the libraries to fix the problem.\r\n\r\nOther applications might be in a position to have humans review the code before executing it under a Realm, or accept very limited subsets of Javascript. In these cases, the review process might be changed to exclude these attacks.\r\n\r\nHowever, given how flexible Javascript is, this should not be considered a reliable workaround. Upgrading to the newer realms-shim and SES is the recommended mitigation.\r\n\r\n### References\r\n\r\n* Realms proposal: https://github.com/tc39/proposal-realms/\r\n* SES: https://github.com/Agoric/SES/\r\n* a detailed blog post will be made on https://agoric.com/blog with more information\r\n\r\n### For more information\r\n\r\nIf you have any questions or comments about this advisory:\r\n\r\n* Open an issue in the [realms-shim](https://github.com/Agoric/realms-shim) or [SES](https://github.com/Agoric/SES) repositories\r\n* Submit security bugs via email at `security` (at `agoric.com`)\r\n* Contact us on twitter: `@agoric`\r\n\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2019-10-04T17:56:12Z",
    "Severity": "CRITICAL",
    "Summary": "Critical severity vulnerability that affects realms-shim and ses",
    "UpdatedAt": "2019-10-04T17:56:12Z",
    "WithdrawnAt": ""
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.2.0"
      },
      "VulnerableVersionRange": "\u003c 1.2.0"
    }
  ]
}