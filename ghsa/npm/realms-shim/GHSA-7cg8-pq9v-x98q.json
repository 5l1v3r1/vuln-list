{
  "Severity": "CRITICAL",
  "UpdatedAt": "2019-10-17T14:11:35Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "realms-shim"
  },
  "Advisory": {
    "DatabaseId": 1743,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTdjZzgtcHE5di14OThx",
    "GhsaId": "GHSA-7cg8-pq9v-x98q",
    "References": [
      {
        "Url": "https://github.com/Agoric/realms-shim/security/advisories/GHSA-7cg8-pq9v-x98q"
      },
      {
        "Url": "https://github.com/advisories/GHSA-7cg8-pq9v-x98q"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-7cg8-pq9v-x98q"
      }
    ],
    "Description": "## sandbox breach via rewrite transformer\r\n\r\n### Impact\r\n\r\nThe realms-shim is intended to provide a \"safe evaluator\" which executes arbitrary strings code with limited authority. This provides a \"sandbox\" which only has access to the specific objects and power that the caller chooses to expose. The `evaluate()` function it implements takes two additional arguments: `endowments` (which are exposed in the global lexical scope), and an options bag. The `transforms` option is a list of functions that are applied to the string of code, to apply Babel-like transformations before it gets executed (e.g. to implement syntax extensions).\r\n\r\nA bug was found in the transformation pipeline that exposed a primal-Realm object to one of the transform functions. The confined code could use this to escape the sandbox and compromise the Realm which created it. This generally leads to a full compromise of the application.\r\n\r\nAll uses of the Realms shim that evaluate unaudited third-party code are vulnerable.\r\n\r\n### Patches\r\n\r\nThe bug is fixed in the 1.2.1 version of `realms-shim`. All users should upgrade to this release.\r\n\r\n### Workarounds\r\n\r\nThe `evaluate()` function (and the accompanying `transforms` option) is available to all confined code, hence the only way to prevent its use would be to carefully audit the confined code for calls to `evaluate()` that use the transformation feature. Given how flexible JavaScript is, this should not be considered a reliable workaround. Upgrading to the latest realms-shim is the recommended mitigation.\r\n\r\n### References\r\n\r\n* Realms proposal: https://github.com/tc39/proposal-realms/\r\n* SES: https://github.com/Agoric/SES/\r\n* more information will appear in a post on https://agoric.com/blog\r\n\r\n### For more information\r\n\r\nIf you have any questions or comments about this advisory:\r\n\r\n* Open an issue in the [realms-shim](https://github.com/Agoric/realms-shim) repository\r\n* Submit security bugs via email at `security` (at `agoric.com`)\r\n* Contact us on twitter: `@agoric`\r\n\r\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2019-10-21T21:58:55Z",
    "Severity": "CRITICAL",
    "Summary": "Critical severity vulnerability that affects realms-shim",
    "UpdatedAt": "2019-10-21T21:58:55Z",
    "WithdrawnAt": ""
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.2.1"
      },
      "VulnerableVersionRange": "\u003c 1.2.1"
    }
  ]
}